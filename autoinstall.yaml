autoinstall:
  version: 1
  identity:
    hostname: AI-BOB
    username: matt
    password: >-
      $6$RqYP2lhZc7gqtSqF$jNkh4gpFK8Hpqnf4TiQHHiT3zWOF6Gx4fnzyFUh2A.0yCw1OhLXL4.5iWME4qSqYCP8Eab/tsPNelABgXrlbe1
  locale: en_US
  keyboard:
    layout: us
    variant: ''
  timezone: America/Chicago
  updates: security
  network:
    ethernets:
      eth0:
        dhcp4: true
    version: 2
  ssh:
    install-server: true
    allow-pw: true
  storage:
    layout:
      name: direct
  packages:
    - software-properties-common
    - wget
    - curl
    - apt-transport-https
    - ca-certificates
    - gnupg
    - lsb-release
    - build-essential
    - dkms
    - linux-headers-generic
    - pkg-config
    - libglvnd-dev
    - python3
    - python3-pip
    - python3-venv
  late-commands:
    # Create log file
    - curtin in-target --target=/target -- sh -c 'mkdir -p /var/log && touch /var/log/autoinstall-custom.log && chmod 666 /var/log/autoinstall-custom.log'
    
    # Update system
    - curtin in-target --target=/target -- sh -c 'echo "=== Starting RTX 5090 Setup at $(date) ===" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- apt update
    - curtin in-target --target=/target -- apt upgrade -y
    
    # CRITICAL: Install VS Code with multiple methods
    - curtin in-target --target=/target -- sh -c 'echo "=== Installing VS Code ===" >> /var/log/autoinstall-custom.log'
    
    # VS Code Method 1: Direct .deb download (MOST RELIABLE)
    - |
      curtin in-target --target=/target -- bash -c '
      echo "Attempting VS Code installation via direct .deb download..." >> /var/log/autoinstall-custom.log
      cd /tmp
      MAX_RETRIES=5
      RETRY_COUNT=0
      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        echo "VS Code download attempt $((RETRY_COUNT + 1))" >> /var/log/autoinstall-custom.log
        if wget -q --timeout=30 https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64 -O vscode.deb; then
          if dpkg -i vscode.deb >> /var/log/autoinstall-custom.log 2>&1; then
            apt-get install -f -y >> /var/log/autoinstall-custom.log 2>&1
            echo "VS Code installed successfully via .deb" >> /var/log/autoinstall-custom.log
            break
          fi
        fi
        RETRY_COUNT=$((RETRY_COUNT + 1))
        sleep 10
      done
      '
    
    # VS Code Method 2: Repository method (backup)
    - |
      curtin in-target --target=/target -- bash -c '
      if ! command -v code &> /dev/null; then
        echo "VS Code not installed via .deb, trying repository method..." >> /var/log/autoinstall-custom.log
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | apt-key add - >> /var/log/autoinstall-custom.log 2>&1
        add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" >> /var/log/autoinstall-custom.log 2>&1
        apt update >> /var/log/autoinstall-custom.log 2>&1
        apt install -y code >> /var/log/autoinstall-custom.log 2>&1
      fi
      '
    
    # CRITICAL: NVIDIA RTX 5090 Driver Installation
    # Note: RTX 5090 requires driver version 545+ for proper support
    - curtin in-target --target=/target -- sh -c 'echo "=== Installing NVIDIA RTX 5090 Drivers ===" >> /var/log/autoinstall-custom.log'
    
    # Add NVIDIA PPA for latest drivers
    - curtin in-target --target=/target -- add-apt-repository ppa:graphics-drivers/ppa -y
    - curtin in-target --target=/target -- apt update
    
    # Install specific driver version for RTX 5090
    # Using 550+ series for best RTX 5090 support
    - |
      curtin in-target --target=/target -- bash -c '
      echo "Installing NVIDIA drivers for RTX 5090..." >> /var/log/autoinstall-custom.log
      
      # First try ubuntu-drivers for automatic detection
      if ubuntu-drivers install --gpgpu >> /var/log/autoinstall-custom.log 2>&1; then
        echo "NVIDIA drivers installed via ubuntu-drivers" >> /var/log/autoinstall-custom.log
      else
        # Fallback to specific version
        echo "Falling back to specific driver version..." >> /var/log/autoinstall-custom.log
        apt install -y nvidia-driver-550 nvidia-utils-550 >> /var/log/autoinstall-custom.log 2>&1
      fi
      
      # Install CUDA toolkit for development
      apt install -y nvidia-cuda-toolkit >> /var/log/autoinstall-custom.log 2>&1
      '
    
    # Disable nouveau driver (important for RTX 5090)
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /etc/modprobe.d/blacklist-nouveau.conf
      blacklist nouveau
      options nouveau modeset=0
      EOF
    
    - curtin in-target --target=/target -- update-initramfs -u
    
    # Create user directory
    - curtin in-target --target=/target -- mkdir -p /home/matt
    
    # Create comprehensive setup verification script
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/verify_setup.sh
      #!/bin/bash
      echo "=== AI-BOB RTX 5090 Setup Verification ==="
      echo "Date: $(date)"
      echo ""
      
      # Check VS Code
      echo "=== VS Code Status ==="
      if command -v code &> /dev/null; then
        echo "✓ VS Code is installed"
        echo "  Version: $(code --version 2>/dev/null | head -1)"
      else
        echo "✗ VS Code is NOT installed"
        echo "  Run: sudo apt install code"
      fi
      echo ""
      
      # Check NVIDIA Drivers
      echo "=== NVIDIA RTX 5090 Driver Status ==="
      if command -v nvidia-smi &> /dev/null; then
        echo "✓ NVIDIA drivers are installed"
        nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv
        echo ""
        # Check if it's actually a 5090
        if nvidia-smi --query-gpu=name --format=csv,noheader | grep -q "5090"; then
          echo "✓ RTX 5090 detected"
        else
          echo "⚠ GPU detected but it's not showing as RTX 5090"
        fi
      else
        echo "✗ NVIDIA drivers are NOT installed"
        echo "  Run: sudo ubuntu-drivers install"
      fi
      echo ""
      
      # Check CUDA
      echo "=== CUDA Status ==="
      if command -v nvcc &> /dev/null; then
        echo "✓ CUDA toolkit is installed"
        echo "  Version: $(nvcc --version | grep release | awk '{print $6}')"
      else
        echo "✗ CUDA toolkit is NOT installed"
      fi
      echo ""
      
      # System info
      echo "=== System Information ==="
      echo "Kernel: $(uname -r)"
      echo "Ubuntu: $(lsb_release -d | cut -f2)"
      echo ""
      
      # Check for issues
      echo "=== Checking for common issues ==="
      if lsmod | grep -q nouveau; then
        echo "⚠ WARNING: nouveau driver is still loaded. Reboot required!"
      else
        echo "✓ nouveau driver is not loaded"
      fi
      
      if [ -f /var/log/autoinstall-custom.log ]; then
        echo ""
        echo "=== Recent install log entries ==="
        tail -20 /var/log/autoinstall-custom.log | grep -E "(error|failed|warning|success)" -i
      fi
      EOF
    
    # Create emergency VS Code installer
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/install_vscode_emergency.sh
      #!/bin/bash
      echo "=== Emergency VS Code Installer ==="
      echo "This will ensure VS Code is installed no matter what"
      
      if command -v code &> /dev/null; then
        echo "VS Code is already installed!"
        code --version
        exit 0
      fi
      
      echo "Method 1: Direct download..."
      cd /tmp
      wget https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64 -O vscode.deb
      if [ -f vscode.deb ]; then
        sudo dpkg -i vscode.deb
        sudo apt-get install -f -y
      fi
      
      if command -v code &> /dev/null; then
        echo "Success! VS Code is now installed"
        exit 0
      fi
      
      echo "Method 2: Snap package..."
      sudo snap install code --classic
      
      if command -v code &> /dev/null; then
        echo "Success! VS Code is now installed via snap"
        exit 0
      fi
      
      echo "Method 3: Repository..."
      wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
      sudo apt update
      sudo apt install code -y
      
      if command -v code &> /dev/null; then
        echo "Success! VS Code is now installed"
      else
        echo "ERROR: All installation methods failed. Please install manually."
      fi
      EOF
    
    # Create NVIDIA driver fix script
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/fix_nvidia_drivers.sh
      #!/bin/bash
      echo "=== NVIDIA RTX 5090 Driver Fix Script ==="
      
      # Remove any existing NVIDIA drivers
      echo "Removing existing NVIDIA drivers..."
      sudo apt-get remove --purge '^nvidia-.*' -y
      sudo apt-get remove --purge '^libnvidia-.*' -y
      sudo apt-get autoremove -y
      
      # Add PPA
      echo "Adding Graphics Drivers PPA..."
      sudo add-apt-repository ppa:graphics-drivers/ppa -y
      sudo apt update
      
      # Install latest drivers
      echo "Installing latest NVIDIA drivers..."
      sudo ubuntu-drivers install
      
      # Blacklist nouveau
      echo "Blacklisting nouveau..."
      echo -e "blacklist nouveau\noptions nouveau modeset=0" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf
      sudo update-initramfs -u
      
      echo "Driver installation complete. Please reboot your system."
      echo "After reboot, run: nvidia-smi"
      EOF
    
    # PyTorch installation script optimized for RTX 5090
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/install_pytorch_5090.sh
      #!/bin/bash
      echo "=== Installing PyTorch for RTX 5090 ==="
      
      # Check if NVIDIA drivers are working
      if ! nvidia-smi &> /dev/null; then
        echo "ERROR: NVIDIA drivers not detected. Please install drivers first."
        echo "Run: bash ~/fix_nvidia_drivers.sh"
        exit 1
      fi
      
      # Create virtual environment
      python3 -m venv ~/pytorch_env
      source ~/pytorch_env/bin/activate
      
      # Upgrade pip
      pip install --upgrade pip
      
      # Install PyTorch with CUDA 12.1 support (best for RTX 5090)
      echo "Installing PyTorch with CUDA 12.1 support..."
      pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
      
      # Verify installation
      python -c "import torch; print(f'PyTorch {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'GPU: {torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"Not detected\"}')"
      
      echo ""
      echo "Installation complete!"
      echo "To activate PyTorch environment: source ~/pytorch_env/bin/activate"
      EOF
    
    # Set permissions
    - curtin in-target --target=/target -- chmod +x /home/matt/verify_setup.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/install_vscode_emergency.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/fix_nvidia_drivers.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/install_pytorch_5090.sh
    - curtin in-target --target=/target -- chown -R matt:matt /home/matt
    
    # Create desktop shortcuts
    - curtin in-target --target=/target -- mkdir -p /home/matt/Desktop
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/Desktop/verify-setup.desktop
      [Desktop Entry]
      Version=1.0
      Type=Application
      Name=Verify RTX 5090 Setup
      Comment=Check VS Code and NVIDIA driver installation
      Exec=gnome-terminal -- bash -c "/home/matt/verify_setup.sh; echo Press any key to close; read"
      Icon=nvidia-settings
      Terminal=true
      Categories=System;
      EOF
    
    - curtin in-target --target=/target -- chmod +x /home/matt/Desktop/verify-setup.desktop
    - curtin in-target --target=/target -- chown matt:matt /home/matt/Desktop/verify-setup.desktop
    
    # Final check
    - curtin in-target --target=/target -- sh -c 'echo "=== Installation Complete at $(date) ===" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'dpkg -l | grep -E "(code|nvidia)" >> /var/log/autoinstall-custom.log'
