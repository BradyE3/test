autoinstall:
  version: 1
  identity:
    hostname: AI-BOB
    username: matt
    password: >-
      $6$RqYP2lhZc7gqtSqF$jNkh4gpFK8Hpqnf4TiQHHiT3zWOF6Gx4fnzyFUh2A.0yCw1OhLXL4.5iWME4qSqYCP8Eab/tsPNelABgXrlbe1
  locale: en_US
  keyboard:
    layout: us
    variant: ''
  timezone: America/Chicago
  updates: security
  network:
    ethernets:
      eth0:
        dhcp4: true
    version: 2
  ssh:
    install-server: true
    allow-pw: true
  storage:
    layout:
      name: direct
  packages:
    - software-properties-common
    - wget
    - curl
    - python3
    - python3-pip
    - python3-venv
    - ubuntu-drivers-common
    - apt-transport-https
    - ca-certificates
    - gnupg
    - lsb-release
    - git
    - build-essential
  late-commands:
    # Create log file
    - curtin in-target --target=/target -- touch /var/log/autoinstall-custom.log
    - curtin in-target --target=/target -- chmod 666 /var/log/autoinstall-custom.log
    
    # Update system
    - curtin in-target --target=/target -- sh -c 'echo "Starting custom installation at $(date)" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- apt update 2>&1 | tee -a /target/var/log/autoinstall-custom.log
    
    # Install NVIDIA drivers with error handling
    - curtin in-target --target=/target -- sh -c 'echo "Installing NVIDIA drivers..." >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- add-apt-repository ppa:graphics-drivers/ppa -y 2>&1 | tee -a /target/var/log/autoinstall-custom.log || true
    - curtin in-target --target=/target -- apt update 2>&1 | tee -a /target/var/log/autoinstall-custom.log
    - curtin in-target --target=/target -- ubuntu-drivers install --gpgpu 2>&1 | tee -a /target/var/log/autoinstall-custom.log || echo "NVIDIA driver install failed, will retry on first boot" >> /target/var/log/autoinstall-custom.log
    
    # Install VS Code - Method 1 (Primary)
    - curtin in-target --target=/target -- sh -c 'echo "Installing VS Code - Method 1..." >> /var/log/autoinstall-custom.log'
    - |
      curtin in-target --target=/target -- bash -c '
      MAX_RETRIES=3
      RETRY_COUNT=0
      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        echo "VS Code install attempt $((RETRY_COUNT + 1))" >> /var/log/autoinstall-custom.log
        if wget -q https://packages.microsoft.com/keys/microsoft.asc -O /tmp/microsoft.asc 2>/dev/null; then
          apt-key add /tmp/microsoft.asc >> /var/log/autoinstall-custom.log 2>&1
          add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" >> /var/log/autoinstall-custom.log 2>&1
          apt update >> /var/log/autoinstall-custom.log 2>&1
          if apt install -y code >> /var/log/autoinstall-custom.log 2>&1; then
            echo "VS Code installed successfully" >> /var/log/autoinstall-custom.log
            break
          fi
        fi
        RETRY_COUNT=$((RETRY_COUNT + 1))
        sleep 10
      done
      '
    
    # Create user home directory
    - curtin in-target --target=/target -- mkdir -p /home/matt
    
    # Create VS Code backup installer script (Method 2 - Fallback)
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/install_vscode_fallback.sh
      #!/bin/bash
      echo "Running VS Code fallback installer..."
      
      # Method 2: Direct .deb download
      if ! command -v code &> /dev/null; then
        echo "VS Code not found, installing via direct download..."
        cd /tmp
        wget -q https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64 -O vscode.deb
        if [ -f vscode.deb ]; then
          sudo dpkg -i vscode.deb
          sudo apt-get install -f -y
          echo "VS Code installed via .deb package"
        else
          echo "Failed to download VS Code .deb package"
        fi
      else
        echo "VS Code is already installed"
      fi
      EOF
    
    # Create PyTorch installation script
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/install_pytorch.sh
      #!/bin/bash
      echo "Installing PyTorch with CUDA support..."
      
      # Create virtual environment
      python3 -m venv ~/pytorch_env
      source ~/pytorch_env/bin/activate
      
      # Upgrade pip
      pip install --upgrade pip
      
      # Install PyTorch with retry logic
      MAX_RETRIES=3
      RETRY_COUNT=0
      
      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        echo "PyTorch install attempt $((RETRY_COUNT + 1))"
        if pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121; then
          echo "PyTorch installed successfully!"
          echo "To activate the environment, run: source ~/pytorch_env/bin/activate"
          break
        else
          RETRY_COUNT=$((RETRY_COUNT + 1))
          if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
            echo "Installation failed, retrying in 30 seconds..."
            sleep 30
          else
            echo "PyTorch installation failed after $MAX_RETRIES attempts"
            exit 1
          fi
        fi
      done
      EOF
    
    # Create NVIDIA driver fallback script
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/install_nvidia_fallback.sh
      #!/bin/bash
      if ! nvidia-smi &> /dev/null; then
        echo "NVIDIA drivers not detected, attempting installation..."
        sudo add-apt-repository ppa:graphics-drivers/ppa -y
        sudo apt update
        sudo ubuntu-drivers install --gpgpu
      else
        echo "NVIDIA drivers are already installed"
        nvidia-smi
      fi
      EOF
    
    # Create master setup script
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/complete_setup.sh
      #!/bin/bash
      echo "=== Running AI-BOB Setup Script ==="
      echo "This script will ensure all components are properly installed"
      
      # Check and install VS Code if needed
      if ! command -v code &> /dev/null; then
        echo "VS Code not found, running fallback installer..."
        bash ~/install_vscode_fallback.sh
      else
        echo "✓ VS Code is installed"
      fi
      
      # Check and install NVIDIA drivers if needed
      if ! nvidia-smi &> /dev/null; then
        echo "NVIDIA drivers not found, running fallback installer..."
        bash ~/install_nvidia_fallback.sh
      else
        echo "✓ NVIDIA drivers are installed"
        nvidia-smi
      fi
      
      # Install PyTorch
      echo "Installing PyTorch..."
      bash ~/install_pytorch.sh
      
      echo "=== Setup Complete ==="
      echo "VS Code: $(code --version 2>/dev/null | head -1 || echo 'Not installed')"
      echo "NVIDIA: $(nvidia-smi --query-gpu=driver_version --format=csv,noheader 2>/dev/null || echo 'Not installed')"
      echo "PyTorch environment: ~/pytorch_env"
      EOF
    
    # Set permissions
    - curtin in-target --target=/target -- chmod +x /home/matt/install_vscode_fallback.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/install_pytorch.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/install_nvidia_fallback.sh
    - curtin in-target --target=/target -- chmod +x /home/matt/complete_setup.sh
    - curtin in-target --target=/target -- chown -R matt:matt /home/matt
    
    # Create systemd service for first-boot setup
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /etc/systemd/system/firstboot-setup.service
      [Unit]
      Description=First Boot Setup for AI-BOB
      After=network-online.target
      Wants=network-online.target
      ConditionPathExists=!/home/matt/.firstboot_complete
      
      [Service]
      Type=oneshot
      User=matt
      Environment="HOME=/home/matt"
      ExecStart=/bin/bash /home/matt/complete_setup.sh
      ExecStartPost=/usr/bin/touch /home/matt/.firstboot_complete
      TimeoutSec=1800
      
      [Install]
      WantedBy=multi-user.target
      EOF
    
    - curtin in-target --target=/target -- systemctl enable firstboot-setup.service
    
    # Create desktop shortcut for manual setup (backup)
    - curtin in-target --target=/target -- mkdir -p /home/matt/Desktop
    - |
      cat <<'EOF' | curtin in-target --target=/target -- tee /home/matt/Desktop/complete-setup.desktop
      [Desktop Entry]
      Version=1.0
      Type=Application
      Name=Complete AI-BOB Setup
      Comment=Run this if automatic setup didn't complete
      Exec=gnome-terminal -- bash -c "/home/matt/complete_setup.sh; echo Press any key to close; read"
      Icon=system-software-install
      Terminal=true
      Categories=System;
      EOF
    
    - curtin in-target --target=/target -- chmod +x /home/matt/Desktop/complete-setup.desktop
    - curtin in-target --target=/target -- chown matt:matt /home/matt/Desktop/complete-setup.desktop
    
    # Final status report
    - curtin in-target --target=/target -- sh -c 'echo "=== Installation Summary ===" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "Hostname: AI-BOB" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "User: matt" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "VS Code: $(dpkg -l code 2>/dev/null | grep ^ii && echo Installed || echo Not installed)" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "Setup scripts created in /home/matt/" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "Log file: /var/log/autoinstall-custom.log" >> /var/log/autoinstall-custom.log'
    - curtin in-target --target=/target -- sh -c 'echo "Installation completed at $(date)" >> /var/log/autoinstall-custom.log'
